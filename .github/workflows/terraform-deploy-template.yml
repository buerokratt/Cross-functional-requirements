name: Terraform_deploy_workflow
on:
  workflow_call:
    inputs:
      environment:
        type: string
        required: true
      working_directory:
        type: string
        required: true
      tf_vars:
        type: string
        required: true
      backend_config:
        type: string
        required: true
    secrets:
      azure_ad_client_id:
        required: true
      azure_ad_client_secret:
        required: true
      azure_subscription_id:
        required: true
      azure_ad_tenant_id:
        required: true
        
jobs:
  terraform:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    name: Terraform
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
        shell: bash
    env:
      ARM_CLIENT_ID: ${{ secrets.azure_ad_client_id }}
      ARM_CLIENT_SECRET: ${{ secrets.azure_ad_client_secret }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.azure_subscription_id }}
      ARM_TENANT_ID: ${{ secrets.azure_ad_tenant_id }}
      tf_vars: ${{ inputs.tf_vars }}
      backend_config: ${{ inputs.backend_config }}
  
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
 
    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check
         
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init -backend-config=$backend_config
    
    # Ensures all the terraform code and files are syntaxically correct 
    - name: Terraform Validate
      run: terraform validate
    
    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan --var-file=$tf_vars
 
    # On push to main, build or change infrastructure according to Terraform configuration files
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply --var-file=$tf_vars -auto-approve -input=false 